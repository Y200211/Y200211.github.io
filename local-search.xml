<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL | ����ǳ������</title>
    <link href="/2023/06/07/04%E8%AE%B2%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/06/07/04%E8%AE%B2%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>����һ�������ֳ�����ʵ�֣���ϣ�����������飬N����</p><ul><li><p>��ϣ��</p><p>  һ���Ǹ�һ������ֵ��Ȼ��ͨ����ϣ���������N��ͨ�����N����ȡ����Ҫ��ֵ����ʱ�����������������N������ǹ�ϣ��ͻ����ʱ�ͻ��ں����һ����������ϣ������ɾ��ʱ�临�Ӷȶ���O(n)�����������ѯ����鷳����Ϊ��������ģ������ڵ���ÿ����Ҫ��һ�Σ����ԣ�<strong>��ϣ�����ֽṹ������ֻ�е�ֵ��ѯ�ĳ���</strong>������Memcached������һЩNoSQL���档</p><p>  �ܽ�һ�£�</p><pre><code class="hljs">��ɾ�ĵ��ٶȺܿ죬��ֵ��ѯҲ�ܿ죬���Ƿ�Χ��ѯ����</code></pre></li><li><p>��������</p><ul><li><p>�ŵ㣺</p><p>  ��Ϊ����������飬���Բ�ѯ��ʱ������ö��ַ���ʱ�临�Ӷ���O(logN)��Ҳ���ʺϷ�Χ��ѯ���Ȳ������������Ȼ���������������һֱ�鵽����ı߽缴�ɡ�</p></li><li><p>ȱ�㣺</p><p>  ������鷳����ΪҪά�������ԣ����Ե���������������м��ʱ�򣬺��������Ҫ���������Ų����Ч�ʺܵ͡�</p></li></ul><p>  ���ԣ�<strong>������������ֻ�����ھ�̬�洢����</strong>��������Ҫ�������2017��ĳ�����е������˿���Ϣ�����಻�����޸ĵ����ݡ�</p></li></ul><p>����������ʵ�ֶ��к����Ե�ȱ�㣬����Ϊ�˽����Щȱ�㣬�����˵����֣��뿴���ġ�</p><ul><li><p>������������</p><p>  Ҫ˵N��������˵˵������������Ϊʲô���С���Ϊ�������Ĳ�ѯʱ�临�Ӷ���O(logN)�����ǲ���ĸ��Ӷ�Ҳ��O(logN)����Ϊʲô���ö����������ء���Ϊ���ǵ�������ֹ�������ڴ��У����ڴ����У�������IO��ȡ���ݿ��ʱ���Լ��10ms����������Ӧ�ü��ٶ����ݿ���л���ȡ������������N������B����B+����</p></li><li><p>N����������</p><p>  �����׳Ƶ�B��������Nһ����1200��Ҳ����˵����1200������������������4��ʱ�򣬾Ϳ��Դ�1200^3��</p></li><li><p><strong>B+����</strong></p><p>  InnoDB�е�����ģ�ͣ������Ƚ���һ��B����B+��������</p><ul><li>B+�������ݶ�����Ҷ�ӽ�㣬��B���������ڸ����ڵ㣬B+�������Ϊ���ʺ��ڴ��̴��������ⲿ����ģʽ����Ϊ��ÿ���ڵ㶼�����ݻ�ʹ�����ݿ�治�¼����ڵ�֮�󲻵ò���ҳ���⵼�������ĸ߶����ӣ�����IO�������ӣ�Ч�ʽ���</li><li>B+����Ҷ�ӽ�㱣֤�������Ե�ͬʱ������ָ�����������ˣ��Ᵽ֤�˷�Χ��ѯʱ���÷������ң�ֱ�ӱ������ɡ�</li></ul></li></ul><p>˵���������ĵײ�洢���ͣ�����������ʵ�������л�������һЩ���⡣</p><p>�ȿ��������ļ򵥷��ࣺ</p><ul><li>����������Ҷ�ӽڵ������������ݡ���InnoDB���������Ҳ����Ϊ�۴�������clustered index����</li><li>������������Ҷ�ӽڵ�������������ֵ����InnoDB�����������Ҳ����Ϊ����������secondary index����</li></ul><p>��������������ṹ˵��������������һ�����⣺<strong>����������������ͨ�����Ĳ�ѯ��ʲô����</strong></p><ul><li>��������select * from T where ID&#x3D;500����������ѯ��ʽ����ֻ��Ҫ����ID���B+����</li><li>��������select * from T where k&#x3D;5������ͨ������ѯ��ʽ������Ҫ������k���������õ�ID��ֵΪ500���ٵ�ID����������һ�Ρ�������̳�Ϊ�ر���</li></ul><p>Ҳ����˵�����ڷ����������Ĳ�ѯ��Ҫ��ɨ��һ������������ˣ�������Ӧ����Ӧ�þ���ʹ��������ѯ��</p><h2 id="����ά��"><a href="#����ά��" class="headerlink" title="����ά��"></a>����ά��</h2><p>����������һ���������������ã�</p><ul><li>���ӽڵ��ʱ��������������������������ֱ����β�����Ӽ��ɣ�����Ҫ���м���룬�ᵼ��ҳ�������⣬������������ռ��λ��Ҳ��С����һ����Ψһ������ȣ���ɾ��ͬ��������һ���ʹ��αɾ������ֹҳ�ϲ�������</li><li>������ռ��λ��С����һ���ô������ǻ��ʡ�Ǿ۴��������������������Ĵ�С����Ϊ������һ������Ҷ�ӽ�㶼�����������ڻر�����</li></ul><p>��Ȼ������������ô��ô������Ƿ��²����ԣ��������������ʹ�÷�����ID�ȽϺã�</p><ul><li>���ֻ��һ���������������������Ψһ��������ô�����Ψһ���ֶ���Ϊ�����ȽϺã���Ϊ�����˲����α������Ҫ������ID�Ļ�����Ҫ�Ȳ�һ��Ψһ���ֶε���������ȡ������ID����������ID�鿴���������ݡ�</li></ul><h2 id="������������������������"><a href="#������������������������" class="headerlink" title="������������������������"></a><strong>������������������������</strong></h2><ul><li>�������������ڶ����������Ѿ����õ�����Ҫ���������ݣ����ûر���������Ҫ��ľ��Ǹ�����������ʹ��������������������Ҳ���ܴ�ɡ�</li><li>�����������ǰѼ����к���һ�𹹽�һ���������������������п��ܴ�ɸ���������������Ҫע�����������ǰ׺���򣬲�ѯ��ʱ���ֶε�˳��һ��Ҫע�⡣������ԭ���ԭ�����ǣ���Ϊ�����������������Ǵ������ҵ����ȶȵģ����Բ��ʱ������ȴ���߿�ʼ�������ò�������������</li></ul><h2 id="��������"><a href="#��������" class="headerlink" title="��������"></a>��������</h2><p>����˵���Ǿ����ܵ�����Ѳ��������������ݹ��˵�������������ӣ�</p><p>���������С����ֵ�һ�������ţ�����������10��������к���</p><p><img src="https://secure2.wostatic.cn/static/pKWUQG4m83cLKN3rteUge7/image.png?auth_key=1686068710-7c32xCbkcHpEiocvRpFafZ-0-13262455ef8fc410100ea5749500ed50"></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>���ݿ�</tag>
      
      <tag>����</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL | 日志系统</title>
    <link href="/2023/06/05/02%E8%AE%B2%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/05/02%E8%AE%B2%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>首先介绍两个日志的基本概念，一个是物理操作，一个是逻辑操作。</p><ul><li><p>物理操作</p><p>  物理操作是对数据库底层数据存储结构的操作，即对数据在物理存储设备上的读写操作，例如读取和写入具体的数据块、页或者记录等。物理操作直接访问存储设备，包括对设备的读取、写入、删除操作等，因此它对应着实际的存储结构。 因为redolog是Innodb中特有的日志，又因为存储引擎在最底层，所以redolog是物理操作。</p></li><li><p>逻辑操作</p><p>  逻辑操作是对数据库中对象的操作，例如对表中数据的增删改查等操作，它是基于用户或应用程序想要执行的实际操作进行的操作。逻辑操作是以SQL语言的形式体现的，根据不同的SQL语句可以进行增删改查等逻辑操作，而不考虑数据的存储细节和实际操作过程。因为binlog是mysql中自带的，所以在上层，只能进行逻辑操作的记录。</p></li></ul><p>接下来来讲两个日志，一个是redolog，一个是binlog。</p><ul><li><p>redolog（主要作用是crash-safe）</p><p>  redolog出现的目的是完成事物的一致性，当事务进行到一半的时候mysql突然崩溃了，redolog可以进行回滚操作，它本身是以二进制的方式存储的。还有一个持久化的目的，因为每次想把操作持久化都要进行磁盘的读写，但是磁盘读写太慢了，所以先在内存记录下来，当系统不忙的时候在写到磁盘上去。其实就是MySQL里经常说到的WAL技术，WAL的全称是Write-Ahead Logging。因为redolog是物理操作，所以存的都是结果如何变更，不会存具体的逻辑。它的存储方式如下图：</p><p>  checkpoint表示从哪里开始，write pos表示在哪里结束</p><p>  <img src="https://secure2.wostatic.cn/static/6QEVzctFnb9hojQNRBAch6/image.png?auth_key=1685951732-vKEmxpARFGTXZ2DsnRdLio-0-c43dbf264b712af5f34f64673b782ef2"></p></li><li><p>binlog（主要作用是归档，即回到某一个时间点的数据库状态）</p><p>  底层使用二进制存储的语句逻辑，加入想回到中午那时候的数据库，就需要找到中午之前最近的全局备份，然后执行binlog到中午即可。</p><p>  常见的 binlog 格式有三种：statement、row 和 mixed，不同格式的 binlog 会记录不同粒度的信息。</p><ul><li>statement 格式是最常见的 binlog 格式，它记录的是 SQL 语句的执行信息。也就是说，如果一个 SQL 语句要修改多行数据，那它只需要记录这条语句本身，而不需要记录每行数据的修改情况。这种格式下日志量小，但是存在一定的不一致性。</li><li>row 格式记录的是每一行数据修改的详细情况，一条修改命令会被具体记录为几条将要修改数据的语句。这种格式下数据更为详细，但是日志量较大。</li><li>mixed 格式在 statement 和 row 格式之间切换，刚开始以 statement 方式记录日志，当出现不支持语句级别的操作时，会自动转化为 row 格式记录。mixed 格式将 statement 和 row 格式的优点结合起来，同时也存在对应的缺点。</li></ul></li></ul><p>这两个日志相结合，使用的时候需要保证一致性，如果在两个日志中间crash了，保证不了一致性，所以引入了一个类似事务的操作，如下图：</p><p>将redo log的写入拆成了两个步骤：prepare和commit，这就是”两阶段提交”。</p><p><img src="https://secure2.wostatic.cn/static/cAC2ALzsaU3uzNME5igau5/image.png?auth_key=1685952120-3gmcfMXkULZMLumRwL1qw7-0-61977f040482aeba91a39c3eebd21c34"></p><p>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘。这个参数我建议你设置成1，这样可以保证MySQL异常重启之后数据不丢失。</p><p>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数我也建议你设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL | 事务隔离</title>
    <link href="/2023/06/05/03%E8%AE%B2%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <url>/2023/06/05/03%E8%AE%B2%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<ul><li><p>首先先上广为人知的知识点：</p><p>  1、务的特性：原子性（A）、一致性（C）、隔离性（I）、持久性（D）</p></li></ul><p>2、多事务同时执行的时候，可能会出现的问题：脏读、不可重复读、幻读<br>3、事务隔离级别：读未提交、读提交、可重复读、串行化<br>4、不同事务隔离级别的区别：  </p><pre><code class="hljs">读未提交：一个事务还未提交，它所做的变更就可以被别的事务看到  </code></pre><p>读提交：一个事务提交之后，它所做的变更才可以被别的事务看到<br>可重复读：一个事务执行过程中看到的数据是一致的。未提交的更改对其他事务是不可见的<br>串行化：对应一个记录会加读写锁，出现冲突的时候，后访问的事务必须等前一个事务执行完成才能继续执行</p><ul><li><p>四种隔离级别的实现方法：</p><ul><li>读未提交：直接返回最新值，没有视图的概念</li><li>读提交：每个SQL语句生成一个视图</li><li>可重复度：每个事务开始的时候生成一个视图，一直用到事务结束</li><li>串行化：简单来说就是加锁，用加锁的方式避免并行操作</li></ul></li><li><p>四种隔离级别具体的使用场景：</p><ul><li>01: Read uncommitted 读未提交; 公司发工资了，领导把5000元打到singo的账号上，但是该事务并未提交，而singo正好去查看账户，发现工资已经到账，是5000元整，非常高兴。可是不幸的是，领导发现发给singo的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，最后singo实际的工资只有2000元，singo空欢喜一场。</li><li>02:Read committed 读已提交; singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，并在singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，为何……</li><li>03:Repeatable read 重复读 当singo拿着工资卡去消费时，一旦系统开始读取工资卡信息（即事务开始），singo的老婆就不可能对该记录进行修改，也就是singo的老婆不能在此时转账。</li><li>04：重复读可能出现<a href="https://so.csdn.net/so/search?q=%E5%B9%BB%E8%AF%BB&spm=1001.2101.3001.7020">幻读</a>： singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。有一天，她正在查询到singo当月信用卡的总消费金额（select sum(amount) from transaction where month &#x3D; 本月）为80元，而singo此时正好在外面胡吃海塞后在收银台买单，消费1000元，即新增了一条1000元的消费记录（insert transaction … ），并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为1080元，singo的老婆很诧异，以为出现了幻觉，幻读就这样产生了。（幻读是事务执行过程中，别的事务进行插入操作，从而使原来的查询事务出现“幻觉”）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客操作指南</title>
    <link href="/2023/06/04/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <url>/2023/06/04/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>第一篇文章就先把怎么更新博客说明白吧，就当写个时间胶囊，以防自己忘了😅 ，本篇文章只适合hexo已经搭建好博客，但是不知道怎么更新的人，网上关于搭建hexo博客的文章也挺多的。</p><p>经过滴滴二面面试官的拷打，我已痛定思痛，开始写技术博客，并且开始注重理论和实践的相结合。</p><ol><li>首先找到自己的blog文件夹（我的blog文件在E盘下），用vscode打开之后找到source下面的_posts文件夹，你的文章就以markdown形式储存在这，你可以先用wolai云笔记记录，之后贴到这里，双重保险不怕丢了，这里主要介绍一下怎么给文章分类和打tag吧。下面这段东西在表头粘上就行</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Go">---<br>title: Your Article Title<br>date: YYYY-MM-DD HH:MM:SS<br>categories:<br>  - Category1<br>  - Category2<br>tags:<br>  - Tag1<br>  - Tag2<br>---<br></code></pre></td></tr></table></figure><p>2.把文章写进去之后如何推到远端呢，通过下面这三个命令即可，顺序不能乱，原因看完就知道了</p><ul><li><p>hexo g</p><p>  是hexo generate的缩写，把博客文件夹下面的文章转换成HTML静态页面，这些静态页面储存在博客文件夹下的public下面</p></li><li><p>hexo s</p><p>  是hexo server的缩写，把文件夹下的文章在本地的服务器启动，默认端口4000，这时就可以看页面是否符合你的要求，如果符合的话就可以推送到远端了</p></li><li><p>hexo d</p><p>  是hexo deploy的缩写，把页面推送到博客托管平台，一些配置在config下</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
